import java.util.logging.*;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class LoggerConfig {

    private static LoggerConfig instance;

    private Map<String, Logger> loggerMap;

    private LoggerConfig() {
        loggerMap = new ConcurrentHashMap<>();
    }

    public static synchronized LoggerConfig getInstance() {
        if (instance == null) {
            instance = new LoggerConfig();
        }
        return instance;
    }

    public Logger getLogger(Class<?> clazz) {
        String loggerName = clazz.getName();

        if (loggerMap.containsKey(loggerName)) {
            return loggerMap.get(loggerName);
        }

        Logger logger = Logger.getLogger(loggerName);

        logger.setUseParentHandlers(false);
        logger.setLevel(Level.ALL);

        try {
            String fileName = clazz.getSimpleName() + ".log";
            FileHandler fileHandler = new FileHandler(fileName, true);
            fileHandler.setLevel(Level.ALL);
            fileHandler.setFormatter(new SimpleFormatter());
            logger.addHandler(fileHandler);

            ConsoleHandler consoleHandler = new ConsoleHandler();
            consoleHandler.setLevel(Level.WARNING);
            consoleHandler.setFormatter(new SimpleFormatter());
            logger.addHandler(consoleHandler);

        } catch (Exception e) {
            e.printStackTrace();
        }

        loggerMap.put(loggerName, logger);

        return logger;
    }
}
